using KernelBuilder.Algorithms;
using static KernelBuilder.Common;

namespace KernelBuilder
{
    class ModuleCodeGenerator
    {
        // TODO: Maybe split this into different functions for each func, like hash_encode, decode etc
        public static CodeList GenerateModule(string algorithm, List<string> instructions, string ID)
        {
            CodeList code = new CodeList();

            string algorithmName = instructions.Last().Split("-")[0];

            IAlgorithm finalAlgorithm = parseAlgorithmName(algorithmName);

            code.Add("""
                /**
                 * Plugin has been auto-generated by https://github.com/PenguinKeeper7/KernelBuilder
                 * DO NOT PR into hashcat master
                 */

                /**
                 * Author......: See docs/credits.txt
                 * License.....: MIT
                 */

                #include "common.h"
                #include "types.h"
                #include "modules.h"
                #include "bitops.h"
                #include "convert.h"
                #include "shared.h"

                static const u32   ATTACK_EXEC    = ATTACK_EXEC_INSIDE_KERNEL;
                static const u32   DGST_POS0      = 0;
                static const u32   DGST_POS1      = 3;
                static const u32   DGST_POS2      = 2;
                static const u32   DGST_POS3      = 1;
                """);

            code.Add($"static const u32   DGST_SIZE      = DGST_SIZE_4_{finalAlgorithm.byteLength / 4};");

            bool salted = false;

            // Handle optional salts
            foreach (var instruction in instructions)
            {
                if (instruction.Contains("salt"))
                {
                    salted = true;
                    code.Add("static const u32   HASH_CATEGORY  = HASH_CATEGORY_RAW_HASH_SALTED;");
                }
            }

            if (salted == false)
            {
                code.Add("static const u32 HASH_CATEGORY = HASH_CATEGORY_RAW_HASH;");
            }

            code.Add($"static const char *HASH_NAME      = \"{algorithm}\";");
            code.Add($"static const u64   KERN_TYPE      = {ID.TrimStart('0')};"); // Hashcat doesn't allow 03928, must be 3928. No idea why

            code.Add("""
                static const u32   OPTI_TYPE      = OPTI_TYPE_ZERO_BYTE | OPTI_TYPE_RAW_HASH;
                """);

            // OPTS_TYPE_STOCK_MODULE should never be set, autogenerated plugins should not be PR'ed
            // TODO: remove OPTS_TYPE_SELF_TEST_DISABLE when proper self-test hashes are generated
            code.Add($"static const u64   OPTS_TYPE      = {finalAlgorithm.opts_types} | OPTS_TYPE_SELF_TEST_DISABLE;");

            if (salted)
                code.Add("static const u32   SALT_TYPE      = SALT_TYPE_GENERIC;");
            else
                code.Add("static const u32   SALT_TYPE      = SALT_TYPE_NONE;");

            // TODO: Generate actual candidates
            code.Add("static const char *ST_PASS        = \"NOT_IMPLEMENTED\";");
            
            if(salted)
                code.Add($"static const char *ST_HASH        = \"{string.Join("", Enumerable.Repeat('0', finalAlgorithm.length))}:NOT_IMPLEMENTED\";");
            else
                code.Add($"static const char *ST_HASH        = \"{string.Join("", Enumerable.Repeat('0', finalAlgorithm.length))}\";");

            code.Add("""
                u32         module_attack_exec    (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return ATTACK_EXEC;     }
                u32         module_dgst_pos0      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return DGST_POS0;       }
                u32         module_dgst_pos1      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return DGST_POS1;       }
                u32         module_dgst_pos2      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return DGST_POS2;       }
                u32         module_dgst_pos3      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return DGST_POS3;       }
                u32         module_dgst_size      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return DGST_SIZE;       }
                u32         module_hash_category  (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return HASH_CATEGORY;   }
                const char *module_hash_name      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return HASH_NAME;       }
                u64         module_kern_type      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return KERN_TYPE;       }
                u32         module_opti_type      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return OPTI_TYPE;       }
                u64         module_opts_type      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return OPTS_TYPE;       }
                u32         module_salt_type      (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return SALT_TYPE;       }
                const char *module_st_hash        (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return ST_HASH;         }
                const char *module_st_pass        (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const user_options_t *user_options, MAYBE_UNUSED const user_options_extra_t *user_options_extra) { return ST_PASS;         }

                int module_hash_decode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED void *digest_buf, MAYBE_UNUSED salt_t *salt, MAYBE_UNUSED void *esalt_buf, MAYBE_UNUSED void *hook_salt_buf, MAYBE_UNUSED hashinfo_t *hash_info, const char *line_buf, MAYBE_UNUSED const int line_len)
                {
                """);

            code.spacing = 1;

            code.Add("""
                u32 *digest = (u32 *) digest_buf;

                hc_token_t token;

                memset (&token, 0, sizeof (hc_token_t));
                """);

            if (salted)
            {
                code.Add("token.token_cnt = 2;");
                code.Add("token.sep[0] = hashconfig->separator;");
            }
            else
                code.Add("token.token_cnt = 1;");

            code.Add($"""
                token.len[0]     = {finalAlgorithm.length};
                token.attr[0]    = TOKEN_ATTR_FIXED_LENGTH
                                 | TOKEN_ATTR_VERIFY_HEX;
                """);

            if (salted)
            {
                code.Add("""
                    token.len_min[1] = SALT_MIN;
                    token.len_max[1] = SALT_MAX;
                    token.attr[1]    = TOKEN_ATTR_VERIFY_LENGTH;

                    if (hashconfig->opts_type & OPTS_TYPE_ST_HEX)
                    {
                      token.len_min[1] *= 2;
                      token.len_max[1] *= 2;

                      token.attr[1] |= TOKEN_ATTR_VERIFY_HEX;
                    }
                    """);
            }

            code.Add("""
                const int rc_tokenizer = input_tokenizer ((const u8 *) line_buf, line_len, &token);
                
                if (rc_tokenizer != PARSER_OK) return (rc_tokenizer);

                const u8 *hash_pos = token.buf[0];
                """);

            code.spacing = 2;

            for (int i = 0; i < finalAlgorithm.byteLength / 4; i++)
            {
                if (finalAlgorithm.endianness == Endianness.LittleEndian)
                    code.Add($"digest[{i}] = hex_to_u32 (hash_pos + {i * 8});");
                else
                    code.Add($"digest[{i}] = byte_swap_32 (hex_to_u32 (hash_pos + {i * 8}));");
            }

            code.spacing = 1;

            code.Add("""
                if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)
                {
                """);

            code.spacing = 2;

            for (int i = 0; i < finalAlgorithm.byteLength / 4; i++)
            {
                // digest[0] -= MD5M_A;
                code.Add($"digest[{i}] -= {finalAlgorithm.initialValues}{(char)(i + 65)};");
            }

            code.spacing = 1;
            
            code.Add("}");

            if (salted)
            {
                code.Add("""
                    const u8 *salt_pos = token.buf[1];
                    const int salt_len = token.len[1];

                    const bool parse_rc = generic_salt_decode (hashconfig, salt_pos, salt_len, (u8 *) salt->salt_buf, (int *) &salt->salt_len);

                    if (parse_rc == false) return (PARSER_SALT_LENGTH);
                    """);
            }

            code.Add("return (PARSER_OK);");

            code.spacing = 0;

            code.Add("""
                }

                int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSED const void *digest_buf, MAYBE_UNUSED const salt_t *salt, MAYBE_UNUSED const void *esalt_buf, MAYBE_UNUSED const void *hook_salt_buf, MAYBE_UNUSED const hashinfo_t *hash_info, char *line_buf, MAYBE_UNUSED const int line_size)
                {
                """);

            code.spacing = 1;

            code.Add("""
                const u32 *digest = (const u32 *) digest_buf;

                // we can not change anything in the original buffer, otherwise destroying sorting
                // therefore create some local buffer
                
            """);

            code.Add($"u32 tmp[{finalAlgorithm.byteLength / 4}];");

            for (int i = 0; i < finalAlgorithm.byteLength / 4; i++)
            {
                code.Add($"tmp[{i}] = digest[{i}];");
            }

            code.Add("""
                if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)
                {
                """);

            code.spacing = 2;

            for (int i = 0; i < finalAlgorithm.byteLength / 4; i++)
            {
                // tmp[0] += MD5M_A;
                code.Add($"tmp[{i}] += {finalAlgorithm.initialValues}{(char)(i + 65)};");
            }

            code.spacing = 1;

            code.Add("""
                }

                u8 *out_buf = (u8 *) line_buf;
                """);

            for (int i = 0; i < finalAlgorithm.byteLength / 4; i++)
            {
                if (finalAlgorithm.endianness == Endianness.BigEndian)
                    code.Add($"tmp[{i}] = byte_swap_32 (tmp[{i}]);");
                
                code.Add($"u32_to_hex (tmp[{i}], out_buf +  {i * 8});");
            }

            code.Add($"int out_len = {finalAlgorithm.length};");

            if (salted)
            {
                code.Add("""
                    out_buf[out_len] = hashconfig->separator;

                    out_len += 1;
                
                    out_len += generic_salt_encode (hashconfig, (const u8 *) salt->salt_buf, (const int) salt->salt_len, out_buf + out_len);
                """);
            }

            code.Add("return out_len;");

            code.spacing = 0;

            code.Add("""
                }

                void module_init (module_ctx_t *module_ctx)
                {
                """);

            code.spacing = 1;

            code.Add("""
                module_ctx->module_context_size             = MODULE_CONTEXT_SIZE_CURRENT;
                module_ctx->module_interface_version        = MODULE_INTERFACE_VERSION_CURRENT;

                module_ctx->module_attack_exec              = module_attack_exec;
                module_ctx->module_benchmark_esalt          = MODULE_DEFAULT;
                module_ctx->module_benchmark_hook_salt      = MODULE_DEFAULT;
                module_ctx->module_benchmark_mask           = MODULE_DEFAULT;
                module_ctx->module_benchmark_charset        = MODULE_DEFAULT;
                module_ctx->module_benchmark_salt           = MODULE_DEFAULT;
                module_ctx->module_bridge_name              = MODULE_DEFAULT;
                module_ctx->module_bridge_type              = MODULE_DEFAULT;
                module_ctx->module_build_plain_postprocess  = MODULE_DEFAULT;
                module_ctx->module_deep_comp_kernel         = MODULE_DEFAULT;
                module_ctx->module_deprecated_notice        = MODULE_DEFAULT;
                module_ctx->module_dgst_pos0                = module_dgst_pos0;
                module_ctx->module_dgst_pos1                = module_dgst_pos1;
                module_ctx->module_dgst_pos2                = module_dgst_pos2;
                module_ctx->module_dgst_pos3                = module_dgst_pos3;
                module_ctx->module_dgst_size                = module_dgst_size;
                module_ctx->module_dictstat_disable         = MODULE_DEFAULT;
                module_ctx->module_esalt_size               = MODULE_DEFAULT;
                module_ctx->module_extra_buffer_size        = MODULE_DEFAULT;
                module_ctx->module_extra_tmp_size           = MODULE_DEFAULT;
                module_ctx->module_extra_tuningdb_block     = MODULE_DEFAULT;
                module_ctx->module_forced_outfile_format    = MODULE_DEFAULT;
                module_ctx->module_hash_binary_count        = MODULE_DEFAULT;
                module_ctx->module_hash_binary_parse        = MODULE_DEFAULT;
                module_ctx->module_hash_binary_save         = MODULE_DEFAULT;
                module_ctx->module_hash_decode_postprocess  = MODULE_DEFAULT;
                module_ctx->module_hash_decode_potfile      = MODULE_DEFAULT;
                module_ctx->module_hash_decode_zero_hash    = MODULE_DEFAULT;
                module_ctx->module_hash_decode              = module_hash_decode;
                module_ctx->module_hash_encode_status       = MODULE_DEFAULT;
                module_ctx->module_hash_encode_potfile      = MODULE_DEFAULT;
                module_ctx->module_hash_encode              = module_hash_encode;
                module_ctx->module_hash_init_selftest       = MODULE_DEFAULT;
                module_ctx->module_hash_mode                = MODULE_DEFAULT;
                module_ctx->module_hash_category            = module_hash_category;
                module_ctx->module_hash_name                = module_hash_name;
                module_ctx->module_hashes_count_min         = MODULE_DEFAULT;
                module_ctx->module_hashes_count_max         = MODULE_DEFAULT;
                module_ctx->module_hlfmt_disable            = MODULE_DEFAULT;
                module_ctx->module_hook_extra_param_size    = MODULE_DEFAULT;
                module_ctx->module_hook_extra_param_init    = MODULE_DEFAULT;
                module_ctx->module_hook_extra_param_term    = MODULE_DEFAULT;
                module_ctx->module_hook12                   = MODULE_DEFAULT;
                module_ctx->module_hook23                   = MODULE_DEFAULT;
                module_ctx->module_hook_salt_size           = MODULE_DEFAULT;
                module_ctx->module_hook_size                = MODULE_DEFAULT;
                module_ctx->module_jit_build_options        = MODULE_DEFAULT;
                module_ctx->module_jit_cache_disable        = MODULE_DEFAULT;
                module_ctx->module_kernel_accel_max         = MODULE_DEFAULT;
                module_ctx->module_kernel_accel_min         = MODULE_DEFAULT;
                module_ctx->module_kernel_loops_max         = MODULE_DEFAULT;
                module_ctx->module_kernel_loops_min         = MODULE_DEFAULT;
                module_ctx->module_kernel_threads_max       = MODULE_DEFAULT;
                module_ctx->module_kernel_threads_min       = MODULE_DEFAULT;
                module_ctx->module_kern_type                = module_kern_type;
                module_ctx->module_kern_type_dynamic        = MODULE_DEFAULT;
                module_ctx->module_opti_type                = module_opti_type;
                module_ctx->module_opts_type                = module_opts_type;
                module_ctx->module_outfile_check_disable    = MODULE_DEFAULT;
                module_ctx->module_outfile_check_nocomp     = MODULE_DEFAULT;
                module_ctx->module_potfile_custom_check     = MODULE_DEFAULT;
                module_ctx->module_potfile_disable          = MODULE_DEFAULT;
                module_ctx->module_potfile_keep_all_hashes  = MODULE_DEFAULT;
                module_ctx->module_pwdump_column            = MODULE_DEFAULT;
                module_ctx->module_pw_max                   = MODULE_DEFAULT;
                module_ctx->module_pw_min                   = MODULE_DEFAULT;
                module_ctx->module_salt_max                 = MODULE_DEFAULT;
                module_ctx->module_salt_min                 = MODULE_DEFAULT;
                module_ctx->module_salt_type                = module_salt_type;
                module_ctx->module_separator                = MODULE_DEFAULT;
                module_ctx->module_st_hash                  = module_st_hash;
                module_ctx->module_st_pass                  = module_st_pass;
                module_ctx->module_tmp_size                 = MODULE_DEFAULT;
                module_ctx->module_unstable_warning         = MODULE_DEFAULT;
                module_ctx->module_warmup_disable           = MODULE_DEFAULT;
                """);

            code.Add("}", 0);

            return code;
        }
    }
}
